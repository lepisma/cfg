;; -*- lisp -*-

(in-package :stumpwm)

;; Start swank
;; (require :swank)
;; (swank-loader:init)
;; (swank:create-server :port 4444
;;                      :style swank:*communication-style*
;;                      :dont-close t)

;; Basics
(set-prefix-key (kbd "C-e"))
(setf *startup-message* NIL
      *suppress-abort-messages* t
      *shell-program* (getenv "SHELL"))

(defvar *message-filters* '("Group dumped")
  "Don't show these messages.")

(defun message (fmt &rest args)
  "Overwritten message function to allow filters"
  (let ((msg-string (apply 'format nil fmt args)))
    (unless (member msg-string *message-filters* :test #'string=)
      (echo-string (current-screen) msg-string))))

(set-module-dir
 (pathname-as-directory (concat (getenv "HOME") "/stumpwm")))

;; Modules
;; (load-module "ttf-fonts")
(load-module "winner-mode")
(load-module "globalwindows")
(load-module "amixer")
(load-module "swm-gaps")
;; (load-module "kbd-layouts")
;; (load-module "command-history")

;; (setf kbd-layouts:*caps-lock-behavior* :ctrl)
;; (kbd-layouts:keyboard-layout-list "us" "in -variant hin-wx")

(setf swm-gaps:*inner-gaps-size* 10
      swm-gaps:*outer-gaps-size* 10
      swm-gaps:*head-gaps-size* 10)

;; Looks
;; (set-font (make-instance 'xft:font
;;                          :family "SauceCodePro Nerd Font"
;;                          :subfamily "Regular"
;;                          :size 12))
;; (set-font "-windows-dina-medium-r-normal--13-100-96-96-c-80-iso8859-1")

(setf *message-window-gravity* :center
      *input-window-gravity* :center
      *window-border-style* :thin
      *message-window-padding* 10
      *maxsize-border-width* 5
      *normal-border-width* 5
      *transient-border-width* 2
      stumpwm::*float-window-border* 2
      stumpwm::*float-window-title-height* 5
      *mouse-focus-policy* :click)

(set-normal-gravity :center)
(set-maxsize-gravity :center)
(set-transient-gravity :center)

(set-fg-color "#eeeeee")
(set-bg-color "#1C2028")
(set-border-color "#232731")
(set-focus-color "#3B4252")
(set-unfocus-color "#232731")
(set-win-bg-color "#22272F")
(set-float-focus-color "#3B4252")
(set-float-unfocus-color "#232731")

(setf *colors* (list "#1C2028"      ; 0 black
                     "#BF616A"      ; 1 red
                     "#A3BE8C"      ; 2 green
                     "#EBCB8B"      ; 3 yellow
                     "#5E81AC"      ; 4 blue
                     "#B48EAD"      ; 5 magenta
                     "#8FBCBB"      ; 6 cyan
                     "#ECEFF4"))    ; 7 white

(defun shift-windows-forward (frames win)
  "Exchange windows through cycling frames."
  (when frames
    (let ((frame (car frames)))
      (shift-windows-forward (cdr frames)
                             (stumpwm::frame-window frame))
      (when win
        (stumpwm::pull-window win frame)))))

(defun window-cls-present-p (win-cls &optional all-groups)
  "Tell if a window (by class) is present"
  (let ((windows (group-windows (if all-groups (current-screen) (current-group)))))
    (member win-cls (mapcar #'window-class windows) :test #'string-equal)))

(defun run-or-raise-prefer-group (cmd win-cls)
  "If there are windows in the same class, cycle in those. Otherwise call
run-or-raise with group search t."
  (if (window-cls-present-p win-cls)
      (run-or-raise cmd `(:class ,win-cls) nil T)
      (run-or-raise cmd `(:class ,win-cls) T T)))

;; Dunst on top fix from https://github.com/stumpwm/stumpwm/issues/469#issuecomment-488437555
(defmethod raise-window :after (win)
  (let ((ignore-names '("polybar-monitor_HDMI-0")))
    (flet ((window-above-p (win) (find-wm-state win :_NET_WM_STATE_ABOVE)))
      (unless (window-above-p (window-xwin win))
        (mapc
         (lambda (w) (setf (xlib:window-priority w) :above))
         (remove-if-not (lambda (w)
                          (and (window-above-p w)
                               (not (member (xlib:wm-name w) ignore-names :test #'string-equal))))
                        (xlib:query-tree (screen-root (current-screen)))))))))

;; Command
(defcommand run-or-raise-firefox () ()
  (run-or-raise-prefer-group "firefox" "firefox"))

(defcommand run-or-raise-im () ()
  (run-or-raise-prefer-group "slack" "Slack"))

(defcommand run-or-raise-alt-browser () ()
  (run-or-raise-prefer-group "chromium" "Chromium"))

(defcommand run-or-raise-konsole () ()
  (run-or-raise-prefer-group "terminal" "konsole"))

(defcommand zotero () ()
  (run-or-raise-prefer-group "zotero" "Zotero"))

(defcommand emacs () ()
  (run-or-raise-prefer-group "emacs" "Emacs"))

(defcommand battery () ()
  (message (run-shell-command "bat" t)))

(defcommand refresh-stuff () ()
  (run-shell-command "sh ~/.fehbg")
  (run-commands "mode-line" "mode-line")
  (run-shell-command "xmodmap ~/.Xmodmap"))

;; Using rofi themes from here https://github.com/adi1090x/rofi
(defcommand run-launcher () ()
  (stumpwm::run-prog "/bin/sh" :args (list "-c" "/home/lepisma/.config/rofi/launchers/type-1/launcher.sh")))

(defcommand rotate-windows () ()
  (let* ((frames (stumpwm::head-frames (current-group) (current-head)))
         (win (stumpwm::frame-window (car (last frames)))))
    (shift-windows-forward frames win)))

(defcommand windows-left-right () ()
  "Open windows side by side"
  (run-commands "only" "vsplit"))

(defcommand windows-up-down () ()
  "Open windows up and down"
  (run-commands "only" "hsplit"))

(defcommand raise-brightness () ()
  (run-shell-command "light -A 5"))

(defcommand lower-brightness () ()
  (run-shell-command "light -U 5"))

(amixer::defvolcontrol amixer-Master-5- "Master" "5%-")
(amixer::defvolcontrol amixer-Master-5+ "Master" "5%+")

(defun executable-find (name)
  "Tell if given executable is present in PATH."
  (let ((which-out (string-trim '(#\  #\linefeed) (run-shell-command (concat "which " name) t))))
    (unless (string-equal "" which-out) which-out)))

(defun slop-get-pos ()
  (mapcar #'parse-integer (ppcre:split "[^0-9]" (run-shell-command "slop -f \"%x %y %w %h\"" t))))

(defun slop-or-float ()
  "Slop the current window or just float if slop cli not present."
  (if (executable-find "slop")
      (let ((window (current-window))
            (pos (slop-get-pos)))
        (float-window window (current-group))
        (float-window-move-resize window
                                  :x (nth 0 pos)
                                  :y (nth 1 pos)
                                  :width (nth 2 pos)
                                  :height (nth 3 pos)))
      (run-commands "float-this")))

(defcommand slop-this () () (slop-or-float))

(defmacro define-keyboard-macro (name keys)
  `(defcommand ,name () ()
     (loop for k in (mapcar #'parse-key ,keys)
           do (send-fake-key (current-window) k))))

(defcommand lol () () (message "lol kek"))

(defcommand emacs-anywhere () ()
  (run-shell-command "bash ~/.emacs.d/private/rogue/emacs-anywhere/ea.sh"))

(defcommand scr () ()
  (let ((selection (car (stumpwm:select-from-menu (current-screen) (list "rectangle" "window" "screen") "Screenshot: "))))
    (run-shell-command (concat "scr " selection))))

(defparameter *frame-dump-file* (uiop:native-namestring "~/.stumpwm-fdump")
  "Dump file for keeping frame positions.")

(defcommand layout-save () ()
  (dump-group-to-file *frame-dump-file*))

(defcommand layout-load () ()
  (if (probe-file *frame-dump-file*)
      (restore-from-file *frame-dump-file*)
      (message "Dump file not found")))

;; All the keys
(define-key *top-map* (kbd "s-t") "exec terminal")
(define-key *top-map* (kbd "s-w") "exec terminal -e htop")
(define-key *top-map* (kbd "C-q") "lol")

(defvar *toggle-map* (make-sparse-keymap))
(define-key *root-map* (kbd "t") '*toggle-map*)
(define-key *toggle-map* (kbd "g") "toggle-gaps")
(define-key *toggle-map* (kbd "f") "slop-this")
(define-key *toggle-map* (kbd "u") "unfloat-this")
(define-key *toggle-map* (kbd "a") "toggle-always-show")
(define-key *toggle-map* (kbd "t") "toggle-always-on-top")

(define-key *top-map* (kbd "s-r") "rotate-windows")
(define-key *top-map* (kbd "s-v") "windows-left-right")
(define-key *top-map* (kbd "s-h") "windows-up-down")
(define-key *top-map* (kbd "s-f") "only")
(define-key *top-map* (kbd "s-c") "fclear")
(define-key *top-map* (kbd "s-l") "exec lock")
(define-key *top-map* (kbd "s-e") "emacs-anywhere")
(define-key *top-map* (kbd "s-S-SPC") "switch-keyboard-layout")
(define-key *top-map* (kbd "s-s") "scr")

(define-key *top-map* (kbd "XF86Mail") "exec emacsclient -c --eval '(progn (mu4e) (mu4e-update-mail-and-index nil))'")

(define-key *top-map* (kbd "XF86Launch5") "gselect 1")
(define-key *top-map* (kbd "XF86Launch6") "gselect 2")
(define-key *top-map* (kbd "XF86Launch7") "gselect 3")

(define-key *top-map* (kbd "XF86Launch8") "lower-brightness")
(define-key *top-map* (kbd "XF86Launch9") "raise-brightness")

(define-key *top-map* (kbd "XF86MonBrightnessUp") "raise-brightness")
(define-key *top-map* (kbd "XF86MonBrightnessDown") "lower-brightness")

(define-key *top-map* (kbd "XF86AudioLowerVolume") "amixer-Master-5-")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "amixer-Master-5+")
(define-key *top-map* (kbd "XF86AudioMute") "amixer-Master-toggle")

(define-key *root-map* (kbd "XF86Launch5") "pull 0")
(define-key *root-map* (kbd "XF86Launch6") "pull 1")
(define-key *root-map* (kbd "XF86Launch7") "pull 2")
(define-key *root-map* (kbd "XF86Launch8") "pull 3")
(define-key *root-map* (kbd "XF86Launch9") "pull 4")

;; Lazy people
(define-key *top-map* (kbd "KP_Up") "ratrelwarp 0 -10")
(define-key *top-map* (kbd "KP_Down") "ratrelwarp 0 10")
(define-key *top-map* (kbd "KP_Left") "ratrelwarp -10 0")
(define-key *top-map* (kbd "KP_Right") "ratrelwarp 10 0")
(define-key *top-map* (kbd "KP_Begin") "ratclick")

(define-key *top-map* (kbd "s-KP_Up") "ratrelwarp 0 -100")
(define-key *top-map* (kbd "s-KP_Down") "ratrelwarp 0 100")
(define-key *top-map* (kbd "s-KP_Left") "ratrelwarp -100 0")
(define-key *top-map* (kbd "s-KP_Right") "ratrelwarp 100 0")
(define-key *top-map* (kbd "s-KP_Begin") "ratclick 3")

(define-key *root-map* (kbd "C-f") "run-or-raise-firefox")
(define-key *root-map* (kbd "C-c") "run-or-raise-konsole")
(define-key *root-map* (kbd "C-r") "run-or-raise-im")
(define-key *root-map* (kbd "C-v") "run-or-raise-alt-browser")
(define-key *root-map* (kbd "C-z") "zotero")
(define-key *root-map* (kbd "!") "run-shell-command")
(define-key *root-map* (kbd "b") "run-launcher")
(define-key *root-map* (kbd "q") "refresh-stuff")
(define-key *root-map* (kbd "TAB") "pull-hidden-other")
(define-key *root-map* (kbd "p") "battery")

(define-key *groups-map* (kbd "Right") "gnext")
(define-key *groups-map* (kbd "Left") "gprev")
(define-key *groups-map* (kbd "M-Right") "gnext-with-window")
(define-key *groups-map* (kbd "M-Left") "gprev-with-window")
(define-key *groups-map* (kbd "b") "global-windowlist")

(defvar *winner-map* (make-sparse-keymap))
(define-key *root-map* (kbd "c") '*winner-map*)
(define-key *winner-map* (kbd "Left") "winner-undo")
(define-key *winner-map* (kbd "Right") "winner-redo")
(define-key *winner-map* (kbd "Down") "layout-save")
(define-key *winner-map* (kbd "Up") "layout-load")

;; Init
(update-color-map (current-screen))
(run-shell-command "sh ~/.screenlayout/multi.sh")
(run-shell-command "xmodmap ~/.Xmodmap")
(run-shell-command "sh ~/.fehbg")
(run-shell-command "xset b off")

;; Groups
(setf (group-name (car (screen-groups (current-screen)))) "TXT")
(run-commands "gnewbg WEB" "gnewbg EXT" "gnewbg-float FLT")

(clear-window-placement-rules)

;; Programs
(run-shell-command "polybar monitor --reload")
(run-shell-command "nm-applet")
(run-shell-command "dunst")
(run-shell-command "redshift")
(run-shell-command "picom --experimental-backends")
(run-shell-command "blueman-applet")
(run-shell-command "copyq")
(run-shell-command "dropbox")
(run-shell-command "streamdeck")

;; Load layout on the start
(run-commands "layout-load")

;; Hooks
(add-hook *post-command-hook* (lambda (command)
                                (when (member command winner-mode:*default-commands*)
                                  (winner-mode:dump-group-to-file))))
